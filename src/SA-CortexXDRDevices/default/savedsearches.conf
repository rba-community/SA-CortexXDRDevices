[Cortex XDR Devices - Lookup Gen]
action.email.show_password = 1
action.email.useNSSubject = 1
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 23 * * * *
description = Generate an ES Assets list from XDR data.
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","dest","src_country","src_state","src_ip","user","vendor_action","threat_match_field","threat_object","threat_object_type","threat_key"]
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
request.ui_dispatch_view = search
schedule_window = auto
search = `sa_cortex_xdr_index` sourcetype=cortex:xdr:endpoints earliest=-65m@m latest=-5m@m\
| dedup endpoint_id \
| rename ip{} as ip, mac_address{} as mac, users{} as owner, group_name{} as bunit\
    ``` Filter out non-useful groups ``` \
| eval bunit=mvfilter(NOT match(bunit, "ALL|All")) \
| eval ip=mvjoin(ip, "|"), mac=mvjoin(mac, "|"), owner=mvjoin(owner, "|"), bunit=mvjoin(bunit, "|") \
| eval nt_host=lower(endpoint_name) \
| eval dns=nt_host + "." + domain\
    ``` last_seen is in milliseconds ``` \
| eval last_seen=round(last_seen/1000, 0) \
| eval _key=sha1(nt_host), _last_seen=last_seen \
| convert ctime(last_seen) \
| eval priority=if(endpoint_type="AGENT_TYPE_SERVER", "high", "medium") \
| eval category=mvjoin(mvsort(mvappend("xdr_os: ".operating_system,\
    "gen: sa-cortexxdrdevices",\
    "xdr_policy: ".assigned_prevention_policy,\
    "xdr_content_status: ".content_status,\
    "xdr_last_seen: ".last_seen,\
    "xdr_package: ".installation_package,\
    "xdr_operational_status: ".operational_status)), "|") \
| iplocation public_ip\
| rename Country as country, City as city, lon as long\
| table _key,_last_seen,ip,mac,nt_host,dns,bunit,priority,category,city,country,lat,long\
| outputlookup append=t key_field=_key xdr_devices \
| stats count
